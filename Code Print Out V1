


# # # # # ARDUNIO CODE # # # # #

#include <RobotShield.h>
RobotShield rs;

int FrontBump = 2;
int RightBump = 1;
int LeftBump = 0;
int front;
int left;
int right;
int Trigger = 500;
char incomingByte;

void setup() {
  Serial.begin(9600);
}

void loop() {
  delay(500);
  rs.stop();
  if (Serial.available() > 0){
    incomingByte = Serial.read();
    if(incomingByte == 'r'){
      rs.rot_cw(350,255);
      delay(500);
    }else if (incomingByte == 'f'){
      rs.forward(600,255);
      delay(500);
    }else if (incomingByte == 'l'){
      rs.rot_ccw(350,255);
      delay(500);
    }else if (incomingByte == 'p'){
      rs.rot_ccw(200,255);
      delay(500);
    }else if (incomingByte == 'o'){
      rs.rot_cw(200,255);
      delay(500);
    }else if (incomingByte == 'b'){
      rs.reverse(600,255);
      delay(500);
    }else if (incomingByte == 's'){
      front = analogRead(FrontBump);
      left = analogRead(LeftBump);
      right = analogRead(RightBump);
      Serial.println(front);
      Serial.println(left);
      Serial.println(right);
    }else if (incomingByte == 'j'){
      left = analogRead(LeftBump);
      Serial.println(left);
    }else if (incomingByte == 'h'){
      right = analogRead(RightBump);
      Serial.println(right);
    }else if (incomingByte == 'k'){
      front = analogRead(FrontBump);
      Serial.println(front);
    }
  }
}





# # # # Robot Simulation # # # #

xHeight = 0
yHeight = 0

Wall = chr(9608)
import random

class robotSim():
    def __init__(self,startx,starty):
        self.curx = startx
        self.cury = starty

class board():
    def __init__(self,xsize,ysize):
        self.grid = []
        self.ysize = ysize
        self.xsize = xsize
        for iy in range(ysize):
            self.grid.append([])
            for ix in range(xsize):
                self.grid[iy].append(' ')

    def display(self):
        for i in range(self.ysize):
            print(self.grid[i])

    def boardSize(self):
        return (xsize,ysize)

    def genBarrier(self):
        count = 0
        for i in range(self.xsize):
            self.grid[0][i] = Wall
            self.grid[self.ysize-1][i] = Wall
        for i in range(self.ysize):
            self.grid[i][0] = Wall
            self.grid[i][self.xsize-1] = Wall
        total = int(self.xsize * self.ysize)
        obstactleNum = random.randint(int(total/50),int(total/30))
        count = obstactleNum
        print(count)
        while count != 0:
            try:
                tempx = random.randint(0,self.xsize-1)
                tempy = random.randint(0,self.ysize-1)
                for iy in range(-1,2):
                    for ix in range(-1,2):
                        self.grid[tempy+iy][tempx+ix] = Wall
                count -= 1
            except:
                count -= 1

class robotSim():
    def __init__(self,starty,startx,symbol):
        self.currenty = starty
        self.currentx = startx
        self.symbol = symbol

        for iy in range(-1,2):
            for ix in range(-1,2):
                if room[self.currenty+iy][self.currentx+ix] == Wall:
                    room[self.currenty+iy][self.currentx+ix] = ' '

    def refresh(self):
        room[self.currenty][self.currentx] = self.symbol
        #see every iteration of Map uncomment next line
        #printRoom()
        #n = input('')

    def move(self,direction):
        tempx = self.currentx
        tempy = self.currenty
        room[self.currenty][self.currentx] = ' '
        if direction.lower() == 'u':
            if room[bot.currenty - 1][bot.currentx] != Wall:
                self.currenty -= 1
        elif direction.lower() == 'd':
            if room[bot.currenty + 1][bot.currentx] != Wall:
                self.currenty += 1
        elif direction.lower() == 'l':
            if room[bot.currenty][bot.currentx - 1] != Wall:
                self.currentx -= 1
        elif direction.lower() == 'r':
            if room[bot.currenty][bot.currentx + 1] != Wall:
                self.currentx += 1
        self.refresh()

    def senseDis(self,direction):
        xsize = xHeight
        ysize = yHeight
        if direction.lower() == 'u':
            for i in range(ysize - (ysize - self.currenty)+1):
                if room[self.currenty-i][self.currentx] == Wall:
                    return i-1
        elif direction.lower() == 'd':
            for i in range(ysize - self.currenty+1):
                if room[self.currenty+i][self.currentx] == Wall:
                    return i-1
        elif direction.lower() == 'l':
            for i in range(xsize - (xsize - self.currentx)+1):
                if room[self.currenty][self.currentx-i] == Wall:
                    return i-1
        elif direction.lower() == 'r':
            for i in range(xsize - self.currentx+1):
                if room[self.currenty][self.currentx+i] == Wall:
                    return i-1

    def startMap(self):
        Map[self.currenty][self.currentx] = self.symbol
        self.check()
        count = 1
        for i in range(100000):
            move = random.randint(0,3)
            if move == 0:
                bot.runFor()
            elif move == 1:
                bot.runBack()
            elif move == 2:
                bot.runRight()
            elif move == 3:
                bot.runLeft()

    def runFor(self):
        while True:
            if Map[self.currenty-1][self.currentx] == ' ' and Map[self.currenty-1][self.currentx] != Wall:
                #print('Clear Infront going forwards')
                self.check()
                self.move('u')
            else:
                #print('No longer clear infront')
                break

    def runRight(self):
        while True:
            if Map[self.currenty][self.currentx+1] == ' ' and Map[self.currenty][self.currentx+1] != Wall :
                #print('Clear to the right going right')
                self.check()
                self.move('r')
            else:
                #print('No longer clear to the right')
                break

    def runBack(self):
        while True:
            if Map[self.currenty+1][self.currentx] == ' ' and Map[self.currenty+1][self.currentx] != Wall:
                #print('Clear Behind going backwards')
                self.check()
                self.move('d')
            else:
                #print('No longer clear behind')
                break

    def runLeft(self):
        while True:
            if Map[self.currenty][self.currentx-1] == ' ' and Map[self.currenty][self.currentx-1] != Wall:
                #print('Clear to the left going left')
                self.check()
                self.move('l')
            else:
                #print('No longer clear to the left')
                break

    def check(self):
        tempu,tempd,templ,tempr = self.getAll()
        distances = [tempu,tempd,templ,tempr]
        Map[self.currenty-tempu][self.currentx] = Wall
        Map[self.currenty+tempd][self.currentx] = Wall
        Map[self.currenty][self.currentx+tempr] = Wall
        Map[self.currenty][self.currentx-templ] = Wall

    def getAll(self):
        u = int(self.senseDis('u'))+1
        d = int(self.senseDis('d'))+1
        l = int(self.senseDis('l'))+1
        r = int(self.senseDis('r'))+1
        return(u,d,l,r)

def main(xinput,yinput):
    global xHeight, yHeight
    xHeight = xinput
    yHeight = yinput
    generatingRoom = board(xinput,yinput)
    generatingRoom.genBarrier()
    return generatingRoom.grid

def printRoom():
    for i in range(len(room)):
	       print(room[i])

def genBlankMap():
    generatingBlankRoom = board(xHeight,yHeight)
    blank = generatingBlankRoom.grid
    return blank

def showMap():
    for i in range(yHeight):
        print(Map[i])

def saveMap():
    pass
def loadMap():
    pass

room = main(28,28)
bot = robotSim(14,14,'X')
bot.refresh()
Map = genBlankMap()
bot.startMap()
showMap()
print('\n','\n')
printRoom()

# # # # Robot Control Code # # # #

import turtle,serial,pickle, random
from time import sleep
import subprocess, os, sys

#import picamera         #These functions can only be run on the pi.
#from qrtools import QR

#******  Setting up Global variables and constants  ******#

#camera = picamera.PiCamera()
#camera.vflip = True
bot = ''
bot_path = 'Will Be Changed'
keyValues = {610:5,530:10,460:11,440:12,370:14,310:16,280:18,260:20,200:25,150:30,130:40,110:60,105:80}
Wall = 'B'
#******  Debugging Modules used in testing  ******#

def findSerialPort():
    global bot_path
    while True:
        outputOne = subprocess.check_output('ls /dev/tty*',shell=True)
        if bot_path in outputOne:
            print('Path found')
            sleep(1)
            return
        else:
            print('Current Path not compatible')
            print(outputOne)
            bot_path = input('Enter new path:')
            print('Retrying, with new path')
            sleep(1)
            connect()

#******  QR Section / Photo Control  ******#

def loop_until_find():
    sleep(2)  #allow the camera a warmup time.                   #This function is one of the first functions that will run, it will
    while True:                                                  #loop constantly until it finds a qr code at that point it will
        sleep(1)  #Don't want to spam the system                 # then execute that command. This means it can run any function from the
        take_photo()                                             #program that is given in a QR format.
        ins = decode()
        cleanup()
        try:
            exec(ins)
        except:
            pass

def cleanup():
    sys.path = '/home/pi/Desktop/Course Work/Python'            #This section of code makes sure that the program doesn't spam memory with photos
    os.system('rm *.png')                                       #it uses the sys and os modules to run a terminal command that will delete any file that
                                                                #ends with a .png extension.

def take_photo():
    camera.capture('checking.png')                              #this is the section of code that takes photo and then saves it a checking.png


def decode():
    current = QR(filename = u'/home/pi/Desktop/Course Work/Python/checking.png')
    if current.decode():
        data = (str(current.data_to_string())[3:])             #This subroutine uses the qrtools module to check if the photo that was taken 'checking.png'
        return data                                            #contains a QR code, if it does then the it will return the data from it


#******  Robot Commands  ******#

#index = {f:'Forward',b:'Backwards',l:'Left',r:'Right',k:'readFront',j:'readLeft',h:'readRight',p:little bit left, o:little bit right}

def send(n):
    bot.write(n)
    actions.push(n)

def read(n):
    send(n)
    tempr = bot.readline()
    return singleConvert(simp(tempr))

#******  Saving and Opening  ******#

def saveMap(current_room):
    room_name = open(('room_{}.pkl').format(str(current_room)),'wb')
    x = actions.returning()
    pickle.dump(x, room_name)
    room_name.close()

def loadMap(current_room):
    file = open(('room_{}.pkl').format(str(current_room)),'rb')
    actions.stack = pickle.load(file)
    file.close()

#******  Converting Sections  ******#

def singleConvert(n):
    count = 0
    if n in keyValues:
        return keyValues[n]                 #This function will find the nearest value to match the range of the 'n' parameter
    else:
        while True:
            if n+count in keyValues:        #It uses a while loop to continuasly go through the paramenter and then adding one and taking one away from it
                return keyValues[n+count]   #increasing each time until the nearest value is found at which time it will return that value.
            elif n-count in keyValues:
                return keyValues[n-count]
            else:
                count += 1

def simp(n):
    if len(n)==0:
        return 0
    index = 1
    try:
        for i in range(len(n)):
            int(n[:index])
            index+=1
    except:
        pass
    return int(n[:index])


#******  Main Section  ******#

def createMap():
    for i in range(8):
        f,l,r = readAllSensors()
        plot(2*f,2*l,2*r)
        send('o')


def plot(f,l,r):
    turtle.fd(f)
    turtle.bk(f)
    turtle.left(45)
    turtle.fd(l)
    turtle.bk(l)
    turtle.right(90)
    turtle.fd(r)
    turtle.bk(r)
    turtle.left(45)
    turtle.right(22.5)

def connect():
    count = 0
    global bot, bot_path  #This is one of the most important function, it runs everytime I run the program
    while count < 10:          #This function uses a while loop to try and connect to the bot
        try:
            bot = serial.Serial(bot_path,9600,timeout=1)
            if bot.isOpen() == True:
                print('Connection Established')
                break
        except:
            print('Scanning...')
            sleep(0.1)
            count += 1
    try:
        if bot.isOpen() == True:
            pass
    except:
        print("This path dosen't appear to be working, displaying /dev/ path ?")
        sleep(1)
        findSerialPort()


def readAllSensors():
    count = 0
    forDis = int(read('k'))
    leftDis = int(read('j'))
    rightDis = int(read('h'))
    outputDis = [forDis,leftDis,rightDis]
    return outputDis

#******  Class Setup  ******#


class Stack():
    def __init__(self,maxsize):
        self.maxsize = maxsize              #This is a class made for a stack, I made a custom class so that I knew exactly
        self.pointer = -1                   #how each part of it worked, I also am able to change aspects of it.
        self.stack = []

    def display(self):                      #It contains 2 main programs which are the push and the pop functions, They work
        print(self.stack)                   #by using a pointer to know where to put items into the array and also where to pop
                                            #from so that the array functions like a stack.
    def push(self,to_add):
        if len(self.stack) < self.maxsize:  #It also contains other subroutines such as to know the size of the stack whether
            self.stack.append(to_add)       #the stack is full or not and also to return the entire stack.
            self.pointer += 1
        else:
            print('Stack Overflow')         #In this stack is where all of the commands to the robot are stored, whenever a byte
                                            #of infomation is sent to the bot it is appended to the actions stack.
    def pop(self):                          #The actions stack is also what is saved from each room.
        if len(self.stack) > 0:
            current = (self.stack[self.pointer])
            del(self.stack[self.pointer])
            self.pointer -= 1
            return current
        else:
            print('Underflow')

    def returning(self):
        return self.stack

    def size(self):
        return(len(self.stack))

    def isFull(self):
        if self.maxsize == len(self.stack):
            return True
        else:
            return False

actions = Stack(100)
