import turtle, serial, time, random, os, sys
from time import sleep
from qrtools import QR
import picamera
camera = picamera.PiCamera()

bot = ''
grid = []
startx = 0
starty = 10
current_x = 0
current_y = 10
mode = ''

#With usign the analouge read I have found these to be the average measurments
keyValues = {610:5,530:10,460:11,440:12,370:14,310:16,280:18,260:20,200:25,150:30,130:40,110:60,105:80}

def decode():
    current = QR(filename = u'/home/pi/Desktop/Course Work/Python/checking.png')
    if current.decode():   #For testing purposes, returns true if works
        data = (str(current.data_to_string())[3:]) #have to use index to get the correct section
        return data

def cleanup():
    sys.path = '/home/pi/Desktop/Course Work/Python'
    os.system('rm *.png')

def take_photo():
    camera.capture('checking.png')

def loop_until_find():
    sleep(2)  #allow the camera a warmup time.                   #This function is one of the first functions that will run, it will
    while mode == '':                                            #loop constantly until it finds a qr code that updates the mode
        sleep(1)  #Don't want to spam the system                 #is updated which mean that a qr code has been found
        take_photo()
        ins = decode()
        cleanup()
        try:
            exec(ins)
        except:
            pass

def spinning_map():
    connect()
    while True:
        data.clear()
        readSensorValues()
        f,l,r = convert()
        plot(f*2,l*2,r*2)
        rotater()
        turtle.right(90)


def straight_map():
    connect()
    while True:
        time.sleep(2)
        data.clear()
        tempf = readFront()
        turtle.fd(2*tempf)
        turtle.bk(2*tempf)
        bot.write('rfl')
        turtle.right(90)
        turtle.fd(20)
        turtle.left(90)
        

def readFront():
    bot.write('k')
    tempf = bot.readline()
    return singleConvert(simp(tempf))

def readLeft():
    bot.write('j')
    templ = bot.readline()
    return singleConvert(simp(tempf))

def readRight():
    bot.write('l')
    tempr = bot.readline()
    return singleConvert(simp(tempf))


def diagonalMap():
    connect()
    while True:
        tempr = readRight()
        bot.write('f')
        turtle.right(45)
        turtle.fd(tempr*2)
        turtle.bk(tempr*2)
        turtle.left(45)

def singleConvert(n):
    count = 0
    if n in keyValues:
        return keyValues[n]
    else:
        while True:
            if n+count in keyValues:
                return keyValues[n+count]
            elif n-count in keyValues:
                return keyValues[n-count]
            else:
                count += 1

def noTurn():
    connect()
    data.clear()
    readSensorValues()
    f,l,r = convert()
    plot(f*2,l*2,r*2)

def connect():
    global bot
    time.sleep(1)
    while True:
        try:
            bot = serial.Serial('/dev/ttyACM1',9600,timeout=1)
            if bot.isOpen() == True:
                print('Connection Established')
                break
        except:
            print('Scanning...')
            time.sleep(1)
            
def readSensorValues():
    global actions
    print('start')
    actions.push('Read Sensors')
    for i in range(10):
        time.sleep(0.2)
        bot.write('s')
        tempf = simp(bot.readline())
        templ = simp(bot.readline())
        tempr = simp(bot.readline())
        data.addValue(tempf,templ,tempr)

def simp(n):
    if len(n)==0:
        return 0
    index = 1
    try:
        for i in range(len(n)):
            int(n[:index])
            index+=1
    except:
        pass
    return int(n[:index])

def rotater():
    actions.push('Right rotate 27 Deg')
    bot.write('r')
def rotatel():
    acrtions.push('Left rotate 27 Deg')
    bot.write('l')

def go():
    global grid
    for i in range(11):
        grid.append([])
        for ix in range(11):
            grid[i].append(' ')
    grid[starty][startx] = 'X'

def show():
    for i in range(11):
        print(grid[i])        

def convert():
    forDis, leftDis, rightDis = data.avg()
    inputDis = [forDis,leftDis,rightDis]
    outputDis = [0,0,0]
    print(inputDis)
    
    for iy in range(3):
        for ix in range(10):
          if (inputDis[iy] + ix) in keyValues:
              outputDis[iy] = keyValues[inputDis[iy]+ix]
        for ix in range(10):
          if (inputDis[iy] - ix) in keyValues:
              outputDis[iy] = keyValues[inputDis[iy]-ix]
    if forDis or leftDis or rightDis == '':
        for iy in range(3):
            for ix in range(30):
                  if (inputDis[iy] + ix) in keyValues:
                      outputDis[iy] = keyValues[inputDis[iy]+ix]
            for ix in range(30):
                  if (inputDis[iy] - ix) in keyValues:
                      outputDis[iy] = keyValues[inputDis[iy]-ix]
    for iy in range(3):
        if inputDis[iy] < 90:
            outputDis[iy] == 150
        
    print(outputDis)
    return outputDis

def plot(f,l,r):
    turtle.fd(f)
    turtle.bk(f)
    turtle.left(45)
    turtle.fd(l)
    turtle.bk(l)
    turtle.right(90)
    turtle.fd(r)
    turtle.bk(r)
    turtle.left(45)
    
class lists():
    def __init__(self):
        self.forward = []
        self.right = []
        self.left = []
        self.countForward = 0
        self.countLeft = 0
        self.countRight = 0
        
    def avg(self):
        max = len(self.forward)
        for i in range(max):
            self.countForward += self.forward[i]
            self.countLeft += self.left[i]
            self.countRight += self.right[i]
        return self.countForward/max, self.countLeft/max, self.countRight/max
        
    def addValue(self,f,l,r):
        self.forward.append(f)
        self.left.append(l)
        self.right.append(r)

    def clear(self):
        self.forward = []
        self.right = []
        self.left = []
        self.countForward = 0
        self.countLeft = 0
        self.countRight = 0

class Stack():
    def __init__(self,maxsize):
        ##maybe remove max size conveince.
        self.maxsize = maxsize
        self.pointer = -1
        self.stack = []
        
    def display(self):
        print(self.stack)         
                       
    def push(self,to_add):
        if len(self.stack) < self.maxsize:
            self.stack.append(to_add)
            self.pointer += 1
        else:
            print('Stack Overflow')
                       
    def pop(self):
        if len(self.stack) > 0:
            current = (self.stack[self.pointer])
            self.stack[self.pointer] = ''
            self.pointer -= 1
            return current
        else:
            print('Underflow')

    def returning(self):
        return self.stack

    def size(self):
        return(len(self.stack))
        
        
data = lists()
actions = Stack(100)
